AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Prefix:
    Type: String
    Default: cmp-notes-mrk

Resources:
  Api:
    Type: AWS::Serverless::HttpApi

  ApiDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete/dist
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: DELETE
            Path: /:id
      Handler: index.handler
      Role: !GetAtt ApiExecutionRole.Arn
      Runtime: nodejs18.x

  ApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
      Policies:
        - PolicyName: !Sub '${Prefix}-api-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NotesTable}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NotesTable}/index/*'
      RoleName: !Sub '${Prefix}-api-execution-role'

  ApiDictateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/dictate/dist
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: POST
            Path: /dictate
      Handler: index.handler
      Role: !GetAtt ApiExecutionRole.Arn
      Runtime: nodejs18.x

  ApiListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list/dist
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /
      Handler: index.handler
      Role: !GetAtt ApiExecutionRole.Arn
      Runtime: nodejs18.x

  ApiPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/put/dist
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: PUT
            Path: /:id
      Handler: index.handler
      Role: !GetAtt ApiExecutionRole.Arn
      Runtime: nodejs18.x

  ApiSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/search/dist
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /search
      Handler: index.handler
      Role: !GetAtt ApiExecutionRole.Arn
      Runtime: nodejs18.x

  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub '${Prefix}-app-bucket'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html

  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Id: AppBucketPublicRead
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Action: 's3:GetObject'
            Effect: Allow
            Principal: '*'
            Resource: !Sub 'arn:aws:s3:::${AppBucket}/*'
        Version: 2012-10-17

  AudioBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Sub '${Prefix}-audio-bucket'

  AudioBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AudioBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Effect: Allow
            Principal: '*'
            Resource:
              - !Sub 'arn:aws:s3:::${AudioBucket}'
              - !Sub 'arn:aws:s3:::${AudioBucket}/*'
        Version: 2012-10-17

  NotesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: isComplete
          AttributeType: S
        - AttributeName: noteId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: noteId
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: Review
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: isComplete
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Sub '${Prefix}-notes-table-v4'

Outputs:
  ApiUrl:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
  WebsiteUrl:
    Value: !GetAtt [AppBucket, 'WebsiteURL']
